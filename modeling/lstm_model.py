# modeling/lstm_model.py
# -----------------------------------------------------------------------------
# Entra√Æne un mod√®le LSTM sur les donn√©es s√©quentielles g√©n√©r√©es
# -----------------------------------------------------------------------------

import os
import numpy as np

X_PATH = "data/lstm/X.npy"
Y_PATH = "data/lstm/y.npy"
OUTPUT_PATH = "data/lstm/y_pred_proba.npy"

# V√©rifie que les fichiers existent
if not os.path.exists(X_PATH) or not os.path.exists(Y_PATH):
    print("‚ùå Donn√©es d'entra√Ænement manquantes. Lance d'abord preprocessing/create_lstm_sequences.py")
    exit()

try:
    X = np.load(X_PATH)
    y = np.load(Y_PATH)

    if len(X) == 0 or len(y) == 0:
        print("‚ùå Donn√©es vides. V√©rifie preprocessing/create_lstm_sequences.py")
        exit()

    # üîΩ Exemple minimal ‚Äî √† remplacer par ton vrai mod√®le
    from sklearn.linear_model import LogisticRegression
    model = LogisticRegression(max_iter=200)
    model.fit(X, y)

    proba = model.predict_proba(X)
    np.save(OUTPUT_PATH, proba)

    print(f"‚úÖ Pr√©dictions sauvegard√©es dans : {OUTPUT_PATH}")
except Exception as e:
    print(f"‚ùå Erreur dans lstm_model.py : {e}")
